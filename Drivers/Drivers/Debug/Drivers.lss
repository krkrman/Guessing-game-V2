
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001434  000014c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000f4  008000f4  0000155c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a86  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001047  00000000  00000000  000042ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000181e  00000000  00000000  00005335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000850  00000000  00000000  00006b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000feb  00000000  00000000  000073a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002595  00000000  00000000  0000838f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_1>
       8:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_2>
       c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_7>
      20:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_8>
      24:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_9>
      28:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_10>
      2c:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 03 	call	0x614	; 0x614 <main>
      8a:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <reInitRows>:
#include "../../MCAL/DIO/DIO_interface.h"

#include "KEYPAD_interface.h"

static void reInitRows(Keypad_t* keypad)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	8c 01       	movw	r16, r24
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++)
      9c:	c0 e0       	ldi	r28, 0x00	; 0
      9e:	d0 e0       	ldi	r29, 0x00	; 0
      a0:	10 c0       	rjmp	.+32     	; 0xc2 <reInitRows+0x30>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
      a2:	f8 01       	movw	r30, r16
      a4:	a4 81       	ldd	r26, Z+4	; 0x04
      a6:	b5 81       	ldd	r27, Z+5	; 0x05
      a8:	ac 0f       	add	r26, r28
      aa:	bd 1f       	adc	r27, r29
      ac:	82 81       	ldd	r24, Z+2	; 0x02
      ae:	93 81       	ldd	r25, Z+3	; 0x03
      b0:	fc 01       	movw	r30, r24
      b2:	ec 0f       	add	r30, r28
      b4:	fd 1f       	adc	r31, r29
      b6:	41 e0       	ldi	r20, 0x01	; 1
      b8:	6c 91       	ld	r22, X
      ba:	80 81       	ld	r24, Z
      bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>

#include "KEYPAD_interface.h"

static void reInitRows(Keypad_t* keypad)
{
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++)
      c0:	21 96       	adiw	r28, 0x01	; 1
      c2:	f8 01       	movw	r30, r16
      c4:	80 81       	ld	r24, Z
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	c8 17       	cp	r28, r24
      ca:	d9 07       	cpc	r29, r25
      cc:	54 f3       	brlt	.-44     	; 0xa2 <reInitRows+0x10>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
}
      ce:	df 91       	pop	r29
      d0:	cf 91       	pop	r28
      d2:	1f 91       	pop	r17
      d4:	0f 91       	pop	r16
      d6:	08 95       	ret

000000d8 <checkKeys>:

static s8 checkKeys(Keypad_t* keypad , u8 rowIndex)
{
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	8c 01       	movw	r16, r24
      e4:	f6 2e       	mov	r15, r22
	for (int colIndex = 0 ; colIndex < keypad->columns ; colIndex++ )
      e6:	c0 e0       	ldi	r28, 0x00	; 0
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	20 c0       	rjmp	.+64     	; 0x12c <checkKeys+0x54>
	{
		if (DIO_u8GetPinValue(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex]) == 0)
      ec:	f8 01       	movw	r30, r16
      ee:	a0 85       	ldd	r26, Z+8	; 0x08
      f0:	b1 85       	ldd	r27, Z+9	; 0x09
      f2:	ac 0f       	add	r26, r28
      f4:	bd 1f       	adc	r27, r29
      f6:	86 81       	ldd	r24, Z+6	; 0x06
      f8:	97 81       	ldd	r25, Z+7	; 0x07
      fa:	fc 01       	movw	r30, r24
      fc:	ec 0f       	add	r30, r28
      fe:	fd 1f       	adc	r31, r29
     100:	6c 91       	ld	r22, X
     102:	80 81       	ld	r24, Z
     104:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_u8GetPinValue>
     108:	81 11       	cpse	r24, r1
     10a:	0f c0       	rjmp	.+30     	; 0x12a <checkKeys+0x52>
			return keypad->map[rowIndex][colIndex];
     10c:	f8 01       	movw	r30, r16
     10e:	22 85       	ldd	r18, Z+10	; 0x0a
     110:	33 85       	ldd	r19, Z+11	; 0x0b
     112:	8f 2d       	mov	r24, r15
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	82 0f       	add	r24, r18
     120:	93 1f       	adc	r25, r19
     122:	c8 0f       	add	r28, r24
     124:	d9 1f       	adc	r29, r25
     126:	88 81       	ld	r24, Y
     128:	08 c0       	rjmp	.+16     	; 0x13a <checkKeys+0x62>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
}

static s8 checkKeys(Keypad_t* keypad , u8 rowIndex)
{
	for (int colIndex = 0 ; colIndex < keypad->columns ; colIndex++ )
     12a:	21 96       	adiw	r28, 0x01	; 1
     12c:	f8 01       	movw	r30, r16
     12e:	81 81       	ldd	r24, Z+1	; 0x01
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	c8 17       	cp	r28, r24
     134:	d9 07       	cpc	r29, r25
     136:	d4 f2       	brlt	.-76     	; 0xec <checkKeys+0x14>
	{
		if (DIO_u8GetPinValue(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex]) == 0)
			return keypad->map[rowIndex][colIndex];
	}
	return -1;
     138:	8f ef       	ldi	r24, 0xFF	; 255
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	ff 90       	pop	r15
     144:	08 95       	ret

00000146 <KEYPAD_voidInit>:

void KEYPAD_voidInit(Keypad_t* keypad){
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	1c c0       	rjmp	.+56     	; 0x18e <KEYPAD_voidInit+0x48>
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
     156:	ac 81       	ldd	r26, Y+4	; 0x04
     158:	bd 81       	ldd	r27, Y+5	; 0x05
     15a:	a0 0f       	add	r26, r16
     15c:	b1 1f       	adc	r27, r17
     15e:	ea 81       	ldd	r30, Y+2	; 0x02
     160:	fb 81       	ldd	r31, Y+3	; 0x03
     162:	e0 0f       	add	r30, r16
     164:	f1 1f       	adc	r31, r17
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	6c 91       	ld	r22, X
     16a:	80 81       	ld	r24, Z
     16c:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
     170:	ac 81       	ldd	r26, Y+4	; 0x04
     172:	bd 81       	ldd	r27, Y+5	; 0x05
     174:	a0 0f       	add	r26, r16
     176:	b1 1f       	adc	r27, r17
     178:	ea 81       	ldd	r30, Y+2	; 0x02
     17a:	fb 81       	ldd	r31, Y+3	; 0x03
     17c:	e0 0f       	add	r30, r16
     17e:	f1 1f       	adc	r31, r17
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	6c 91       	ld	r22, X
     184:	80 81       	ld	r24, Z
     186:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
	}
	return -1;
}

void KEYPAD_voidInit(Keypad_t* keypad){
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
     18a:	0f 5f       	subi	r16, 0xFF	; 255
     18c:	1f 4f       	sbci	r17, 0xFF	; 255
     18e:	88 81       	ld	r24, Y
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	08 17       	cp	r16, r24
     194:	19 07       	cpc	r17, r25
     196:	fc f2       	brlt	.-66     	; 0x156 <KEYPAD_voidInit+0x10>
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	0f c0       	rjmp	.+30     	; 0x1bc <KEYPAD_voidInit+0x76>
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
	}
	
	for(int colIndex = 0 ; colIndex < keypad->columns ; colIndex++)
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
     19e:	a8 85       	ldd	r26, Y+8	; 0x08
     1a0:	b9 85       	ldd	r27, Y+9	; 0x09
     1a2:	a0 0f       	add	r26, r16
     1a4:	b1 1f       	adc	r27, r17
     1a6:	ee 81       	ldd	r30, Y+6	; 0x06
     1a8:	ff 81       	ldd	r31, Y+7	; 0x07
     1aa:	e0 0f       	add	r30, r16
     1ac:	f1 1f       	adc	r31, r17
     1ae:	42 e0       	ldi	r20, 0x02	; 2
     1b0:	6c 91       	ld	r22, X
     1b2:	80 81       	ld	r24, Z
     1b4:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
	}
	
	for(int colIndex = 0 ; colIndex < keypad->columns ; colIndex++)
     1b8:	0f 5f       	subi	r16, 0xFF	; 255
     1ba:	1f 4f       	sbci	r17, 0xFF	; 255
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	08 17       	cp	r16, r24
     1c2:	19 07       	cpc	r17, r25
     1c4:	64 f3       	brlt	.-40     	; 0x19e <KEYPAD_voidInit+0x58>
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <KEYPAD_u8GetKey>:

s8 KEYPAD_u8GetKey(Keypad_t* keypad)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	8c 01       	movw	r16, r24
	for (int rowIndex = 0 ; rowIndex< keypad->rows;rowIndex++)
     1de:	c0 e0       	ldi	r28, 0x00	; 0
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
     1e2:	24 c0       	rjmp	.+72     	; 0x22c <KEYPAD_u8GetKey+0x5c>
	{
		reInitRows(keypad);
     1e4:	c8 01       	movw	r24, r16
     1e6:	0e 94 49 00 	call	0x92	; 0x92 <reInitRows>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , LOW);
     1ea:	f8 01       	movw	r30, r16
     1ec:	a4 81       	ldd	r26, Z+4	; 0x04
     1ee:	b5 81       	ldd	r27, Z+5	; 0x05
     1f0:	ac 0f       	add	r26, r28
     1f2:	bd 1f       	adc	r27, r29
     1f4:	82 81       	ldd	r24, Z+2	; 0x02
     1f6:	93 81       	ldd	r25, Z+3	; 0x03
     1f8:	fc 01       	movw	r30, r24
     1fa:	ec 0f       	add	r30, r28
     1fc:	fd 1f       	adc	r31, r29
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	6c 91       	ld	r22, X
     202:	80 81       	ld	r24, Z
     204:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
		s8 characterPressed = checkKeys(keypad , rowIndex);
     208:	ec 2e       	mov	r14, r28
     20a:	6c 2f       	mov	r22, r28
     20c:	c8 01       	movw	r24, r16
     20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <checkKeys>
     212:	f8 2e       	mov	r15, r24
		if (characterPressed != (s8)-1)
     214:	ff ef       	ldi	r31, 0xFF	; 255
     216:	8f 17       	cp	r24, r31
     218:	41 f0       	breq	.+16     	; 0x22a <KEYPAD_u8GetKey+0x5a>
		{
			// to block the code till user let the button
			while (checkKeys(keypad , rowIndex) != (s8)-1);
     21a:	6e 2d       	mov	r22, r14
     21c:	c8 01       	movw	r24, r16
     21e:	0e 94 6c 00 	call	0xd8	; 0xd8 <checkKeys>
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	d1 f7       	brne	.-12     	; 0x21a <KEYPAD_u8GetKey+0x4a>
			
			return characterPressed;
     226:	8f 2d       	mov	r24, r15
     228:	08 c0       	rjmp	.+16     	; 0x23a <KEYPAD_u8GetKey+0x6a>
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
}

s8 KEYPAD_u8GetKey(Keypad_t* keypad)
{
	for (int rowIndex = 0 ; rowIndex< keypad->rows;rowIndex++)
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	f8 01       	movw	r30, r16
     22e:	80 81       	ld	r24, Z
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	c8 17       	cp	r28, r24
     234:	d9 07       	cpc	r29, r25
     236:	b4 f2       	brlt	.-84     	; 0x1e4 <KEYPAD_u8GetKey+0x14>
			while (checkKeys(keypad , rowIndex) != (s8)-1);
			
			return characterPressed;
		}
	}
	return -1;
     238:	8f ef       	ldi	r24, 0xFF	; 255
}
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	08 95       	ret

00000248 <LCD_voidSendChar>:
	u8 address;
	if (y_position < 2 && x_position < 16)
	{
		address = (y_position * 0x40) + x_position;
		SET_BIT(address , 7);
		LCD_voidSendCommand(address);
     248:	cf 93       	push	r28
     24a:	c8 2f       	mov	r28, r24
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	63 e0       	ldi	r22, 0x03	; 3
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	63 e0       	ldi	r22, 0x03	; 3
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     260:	c4 fb       	bst	r28, 4
     262:	44 27       	eor	r20, r20
     264:	40 f9       	bld	r20, 0
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     26e:	c5 fb       	bst	r28, 5
     270:	44 27       	eor	r20, r20
     272:	40 f9       	bld	r20, 0
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	85 e0       	ldi	r24, 0x05	; 5
     278:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     27c:	c6 fb       	bst	r28, 6
     27e:	44 27       	eor	r20, r20
     280:	40 f9       	bld	r20, 0
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	86 e0       	ldi	r24, 0x06	; 6
     286:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     28a:	4c 2f       	mov	r20, r28
     28c:	44 1f       	adc	r20, r20
     28e:	44 27       	eor	r20, r20
     290:	44 1f       	adc	r20, r20
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	87 e0       	ldi	r24, 0x07	; 7
     296:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	63 e0       	ldi	r22, 0x03	; 3
     29e:	87 e0       	ldi	r24, 0x07	; 7
     2a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2a4:	83 ef       	ldi	r24, 0xF3	; 243
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_voidSendChar+0x60>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_voidSendChar+0x66>
     2ae:	00 00       	nop
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	63 e0       	ldi	r22, 0x03	; 3
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2ba:	83 ef       	ldi	r24, 0xF3	; 243
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_voidSendChar+0x76>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_voidSendChar+0x7c>
     2c4:	00 00       	nop
     2c6:	4c 2f       	mov	r20, r28
     2c8:	41 70       	andi	r20, 0x01	; 1
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2d2:	c1 fb       	bst	r28, 1
     2d4:	44 27       	eor	r20, r20
     2d6:	40 f9       	bld	r20, 0
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	85 e0       	ldi	r24, 0x05	; 5
     2dc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2e0:	c2 fb       	bst	r28, 2
     2e2:	44 27       	eor	r20, r20
     2e4:	40 f9       	bld	r20, 0
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	86 e0       	ldi	r24, 0x06	; 6
     2ea:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2ee:	c3 fb       	bst	r28, 3
     2f0:	44 27       	eor	r20, r20
     2f2:	40 f9       	bld	r20, 0
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	63 e0       	ldi	r22, 0x03	; 3
     300:	87 e0       	ldi	r24, 0x07	; 7
     302:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     306:	83 ef       	ldi	r24, 0xF3	; 243
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_voidSendChar+0xc2>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_voidSendChar+0xc8>
     310:	00 00       	nop
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	63 e0       	ldi	r22, 0x03	; 3
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     31c:	83 ef       	ldi	r24, 0xF3	; 243
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <LCD_voidSendChar+0xd8>
     324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_voidSendChar+0xde>
     326:	00 00       	nop
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <LCD_voidSendCommand>:
     32c:	cf 93       	push	r28
     32e:	c8 2f       	mov	r28, r24
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	63 e0       	ldi	r22, 0x03	; 3
     334:	85 e0       	ldi	r24, 0x05	; 5
     336:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     344:	c4 fb       	bst	r28, 4
     346:	44 27       	eor	r20, r20
     348:	40 f9       	bld	r20, 0
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     352:	c5 fb       	bst	r28, 5
     354:	44 27       	eor	r20, r20
     356:	40 f9       	bld	r20, 0
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     360:	c6 fb       	bst	r28, 6
     362:	44 27       	eor	r20, r20
     364:	40 f9       	bld	r20, 0
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	86 e0       	ldi	r24, 0x06	; 6
     36a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     36e:	4c 2f       	mov	r20, r28
     370:	44 1f       	adc	r20, r20
     372:	44 27       	eor	r20, r20
     374:	44 1f       	adc	r20, r20
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	63 e0       	ldi	r22, 0x03	; 3
     382:	87 e0       	ldi	r24, 0x07	; 7
     384:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     388:	83 ef       	ldi	r24, 0xF3	; 243
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_voidSendCommand+0x60>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_voidSendCommand+0x66>
     392:	00 00       	nop
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	63 e0       	ldi	r22, 0x03	; 3
     398:	87 e0       	ldi	r24, 0x07	; 7
     39a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     39e:	83 ef       	ldi	r24, 0xF3	; 243
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_voidSendCommand+0x76>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_voidSendCommand+0x7c>
     3a8:	00 00       	nop
     3aa:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
     3ae:	88 23       	and	r24, r24
     3b0:	89 f1       	breq	.+98     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3b2:	4c 2f       	mov	r20, r28
     3b4:	41 70       	andi	r20, 0x01	; 1
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     3be:	c1 fb       	bst	r28, 1
     3c0:	44 27       	eor	r20, r20
     3c2:	40 f9       	bld	r20, 0
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     3cc:	c2 fb       	bst	r28, 2
     3ce:	44 27       	eor	r20, r20
     3d0:	40 f9       	bld	r20, 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     3da:	c3 fb       	bst	r28, 3
     3dc:	44 27       	eor	r20, r20
     3de:	40 f9       	bld	r20, 0
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	87 e0       	ldi	r24, 0x07	; 7
     3e4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	63 e0       	ldi	r22, 0x03	; 3
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     3f2:	83 ef       	ldi	r24, 0xF3	; 243
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_voidSendCommand+0xca>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_voidSendCommand+0xd0>
     3fc:	00 00       	nop
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	63 e0       	ldi	r22, 0x03	; 3
     402:	87 e0       	ldi	r24, 0x07	; 7
     404:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
     408:	83 ef       	ldi	r24, 0xF3	; 243
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <LCD_voidInit>:
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	63 e0       	ldi	r22, 0x03	; 3
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	87 e0       	ldi	r24, 0x07	; 7
     432:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	0e 94 99 03 	call	0x732	; 0x732 <DIO_voidSetPinDirection>
     45e:	8f e0       	ldi	r24, 0x0F	; 15
     460:	97 e2       	ldi	r25, 0x27	; 39
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <LCD_voidInit+0x4a>
     466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_voidInit+0x50>
     468:	00 00       	nop
     46a:	80 e3       	ldi	r24, 0x30	; 48
     46c:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     470:	83 ef       	ldi	r24, 0xF3	; 243
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <LCD_voidInit+0x5c>
     478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_voidInit+0x62>
     47a:	00 00       	nop
     47c:	80 e3       	ldi	r24, 0x30	; 48
     47e:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     482:	83 ef       	ldi	r24, 0xF3	; 243
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <LCD_voidInit+0x6e>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_voidInit+0x74>
     48c:	00 00       	nop
     48e:	80 e3       	ldi	r24, 0x30	; 48
     490:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_voidInit+0x80>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_voidInit+0x86>
     49e:	00 00       	nop
     4a0:	80 e2       	ldi	r24, 0x20	; 32
     4a2:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4a6:	83 ef       	ldi	r24, 0xF3	; 243
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_voidInit+0x92>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_voidInit+0x98>
     4b0:	00 00       	nop
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4be:	86 e0       	ldi	r24, 0x06	; 6
     4c0:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4ca:	80 e8       	ldi	r24, 0x80	; 128
     4cc:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4d0:	08 95       	ret

000004d2 <LCD_voidSendString>:
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	8c 01       	movw	r16, r24
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <LCD_voidSendString+0x12>
     4de:	0e 94 24 01 	call	0x248	; 0x248 <LCD_voidSendChar>
     4e2:	cf 5f       	subi	r28, 0xFF	; 255
     4e4:	f8 01       	movw	r30, r16
     4e6:	ec 0f       	add	r30, r28
     4e8:	f1 1d       	adc	r31, r1
     4ea:	80 81       	ld	r24, Z
     4ec:	81 11       	cpse	r24, r1
     4ee:	f7 cf       	rjmp	.-18     	; 0x4de <LCD_voidSendString+0xc>
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <LCD_voidClear>:
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_voidSendCommand>
     504:	08 95       	ret

00000506 <LCD_voidSendNumber>:
	}
}

void LCD_voidSendNumber(f32 floatNumber , u8 numbersAfterPoint)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	e2 97       	sbiw	r28, 0x32	; 50
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	24 2f       	mov	r18, r20
	char c[50]; //size of the number
	UTILITY_f32ToString(c , floatNumber , numbersAfterPoint);
     51c:	ab 01       	movw	r20, r22
     51e:	bc 01       	movw	r22, r24
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	0e 94 be 06 	call	0xd7c	; 0xd7c <UTILITY_f32ToString>
	LCD_voidSendString(c);
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
}
     530:	e2 96       	adiw	r28, 0x32	; 50
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <showResult>:

u8 counter = 0;
u8 randomNumber = 0;

void showResult(void){
	LCD_voidClear();
     542:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidClear>
	LCD_voidSendString("your number is:");
     546:	84 e7       	ldi	r24, 0x74	; 116
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
	LCD_voidSendNumber(counter , 0);
     54e:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <counter>
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	0e 94 83 02 	call	0x506	; 0x506 <LCD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	2f e7       	ldi	r18, 0x7F	; 127
     564:	8a e1       	ldi	r24, 0x1A	; 26
     566:	96 e0       	ldi	r25, 0x06	; 6
     568:	21 50       	subi	r18, 0x01	; 1
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <showResult+0x26>
     570:	00 c0       	rjmp	.+0      	; 0x572 <showResult+0x30>
     572:	00 00       	nop
	_delay_ms(2000);
	LCD_voidClear();
     574:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidClear>
	LCD_voidSendString("Real number is:");
     578:	84 e8       	ldi	r24, 0x84	; 132
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
	LCD_voidSendNumber(randomNumber , 0);
     580:	60 91 f5 00 	lds	r22, 0x00F5	; 0x8000f5 <randomNumber>
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	0e 94 83 02 	call	0x506	; 0x506 <LCD_voidSendNumber>
     594:	2f e7       	ldi	r18, 0x7F	; 127
     596:	8a e1       	ldi	r24, 0x1A	; 26
     598:	96 e0       	ldi	r25, 0x06	; 6
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	80 40       	sbci	r24, 0x00	; 0
     59e:	90 40       	sbci	r25, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <showResult+0x58>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <showResult+0x62>
     5a4:	00 00       	nop
	_delay_ms(2000);
	LCD_voidClear();
     5a6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidClear>
	if (counter == (u8)0)
     5aa:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <counter>
     5ae:	81 11       	cpse	r24, r1
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <showResult+0x7a>
	{
		LCD_voidSendString("choose a number pls");
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
     5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <showResult+0xa2>
	}else if (counter > 15)
     5bc:	80 31       	cpi	r24, 0x10	; 16
     5be:	28 f0       	brcs	.+10     	; 0x5ca <showResult+0x88>
	{
		LCD_voidSendString("number between 1:15");
     5c0:	88 ea       	ldi	r24, 0xA8	; 168
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
     5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <showResult+0xa2>
	}
	else if (counter == randomNumber)
     5ca:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <randomNumber>
     5ce:	89 13       	cpse	r24, r25
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <showResult+0x9a>
	{
		LCD_voidSendString("You Won");
     5d2:	8c eb       	ldi	r24, 0xBC	; 188
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <showResult+0xa2>
	}else 
	{
		LCD_voidSendString("You Lost");
     5dc:	84 ec       	ldi	r24, 0xC4	; 196
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
     5e4:	2f e7       	ldi	r18, 0x7F	; 127
     5e6:	8a e1       	ldi	r24, 0x1A	; 26
     5e8:	96 e0       	ldi	r25, 0x06	; 6
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <showResult+0xa8>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <showResult+0xb2>
     5f4:	00 00       	nop
	}
	_delay_ms(2000);
	LCD_voidClear();
     5f6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidClear>
	LCD_voidSendString("Guess another number:");
     5fa:	8d ec       	ldi	r24, 0xCD	; 205
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
	counter = 0;
     602:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <counter>
	randomNumber = UTILITY_generateRandomNumber(1 , 15);
     606:	6f e0       	ldi	r22, 0x0F	; 15
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 ac 06 	call	0xd58	; 0xd58 <UTILITY_generateRandomNumber>
     60e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <randomNumber>
     612:	08 95       	ret

00000614 <main>:
}

int main(void)
{ 	
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	e1 97       	sbiw	r28, 0x31	; 49
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	Keypad_t keyPad;
	randomNumber = UTILITY_generateRandomNumber(1 , 15);
     628:	6f e0       	ldi	r22, 0x0F	; 15
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 ac 06 	call	0xd58	; 0xd58 <UTILITY_generateRandomNumber>
     630:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <randomNumber>
	
	
	keyPad.rows = 4;
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	89 83       	std	Y+1, r24	; 0x01
	keyPad.columns = 4;
     638:	8a 83       	std	Y+2, r24	; 0x02
	u8 rowPorts[4];

	u8 columnPins[4];
	u8 columnPorts[4];

	for (int i = 0; i < 4 ;i++)
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	20 c0       	rjmp	.+64     	; 0x680 <main+0x6c>
	{
		rowPins[i] = i;
     640:	ed e0       	ldi	r30, 0x0D	; 13
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	ec 0f       	add	r30, r28
     646:	fd 1f       	adc	r31, r29
     648:	e8 0f       	add	r30, r24
     64a:	f9 1f       	adc	r31, r25
     64c:	80 83       	st	Z, r24
		rowPorts[i] = PORTC;
     64e:	e1 e1       	ldi	r30, 0x11	; 17
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ec 0f       	add	r30, r28
     654:	fd 1f       	adc	r31, r29
     656:	e8 0f       	add	r30, r24
     658:	f9 1f       	adc	r31, r25
     65a:	22 e0       	ldi	r18, 0x02	; 2
     65c:	20 83       	st	Z, r18
		columnPins[i] = i+4;
     65e:	e5 e1       	ldi	r30, 0x15	; 21
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ec 0f       	add	r30, r28
     664:	fd 1f       	adc	r31, r29
     666:	e8 0f       	add	r30, r24
     668:	f9 1f       	adc	r31, r25
     66a:	34 e0       	ldi	r19, 0x04	; 4
     66c:	38 0f       	add	r19, r24
     66e:	30 83       	st	Z, r19
		columnPorts[i] = PORTC;
     670:	e9 e1       	ldi	r30, 0x19	; 25
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	ec 0f       	add	r30, r28
     676:	fd 1f       	adc	r31, r29
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	20 83       	st	Z, r18
	u8 rowPorts[4];

	u8 columnPins[4];
	u8 columnPorts[4];

	for (int i = 0; i < 4 ;i++)
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	91 05       	cpc	r25, r1
     684:	ec f2       	brlt	.-70     	; 0x640 <main+0x2c>
		rowPins[i] = i;
		rowPorts[i] = PORTC;
		columnPins[i] = i+4;
		columnPorts[i] = PORTC;
	}
	keyPad.rowPins = rowPins;
     686:	ce 01       	movw	r24, r28
     688:	0d 96       	adiw	r24, 0x0d	; 13
     68a:	9c 83       	std	Y+4, r25	; 0x04
     68c:	8b 83       	std	Y+3, r24	; 0x03
	keyPad.columnPins = columnPins;
     68e:	08 96       	adiw	r24, 0x08	; 8
     690:	98 87       	std	Y+8, r25	; 0x08
     692:	8f 83       	std	Y+7, r24	; 0x07
	keyPad.rowPorts = rowPorts;
     694:	04 97       	sbiw	r24, 0x04	; 4
     696:	9e 83       	std	Y+6, r25	; 0x06
     698:	8d 83       	std	Y+5, r24	; 0x05
	keyPad.columnPorts = columnPorts;
     69a:	08 96       	adiw	r24, 0x08	; 8
     69c:	9a 87       	std	Y+10, r25	; 0x0a
     69e:	89 87       	std	Y+9, r24	; 0x09
	
	u8 map[4][4] = {{'7','8','9','/'},
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	e4 e6       	ldi	r30, 0x64	; 100
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	de 01       	movw	r26, r28
     6a8:	5d 96       	adiw	r26, 0x1d	; 29
     6aa:	01 90       	ld	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	8a 95       	dec	r24
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <main+0x96>
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'c','0','=','+'}};
	keyPad.map = map;
     6b2:	ce 01       	movw	r24, r28
     6b4:	4d 96       	adiw	r24, 0x1d	; 29
     6b6:	9c 87       	std	Y+12, r25	; 0x0c
     6b8:	8b 87       	std	Y+11, r24	; 0x0b
	
	
	KEYPAD_voidInit(&keyPad);
     6ba:	4c 97       	sbiw	r24, 0x1c	; 28
     6bc:	0e 94 a3 00 	call	0x146	; 0x146 <KEYPAD_voidInit>
	LCD_voidInit();
     6c0:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidInit>
	LCD_voidSendString("Guess a number: ");
     6c4:	83 ee       	ldi	r24, 0xE3	; 227
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidSendString>
	u8 stringNumber[5];
	u8 c = 0;
     6cc:	10 e0       	ldi	r17, 0x00	; 0
	while(1){
		s8 charater = KEYPAD_u8GetKey(&keyPad);
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <KEYPAD_u8GetKey>
		if (charater != (s8)-1 && charater != '=')
     6d6:	8f 3f       	cpi	r24, 0xFF	; 255
     6d8:	31 f1       	breq	.+76     	; 0x726 <main+0x112>
     6da:	8d 33       	cpi	r24, 0x3D	; 61
     6dc:	21 f1       	breq	.+72     	; 0x726 <main+0x112>
		{
			stringNumber[c++] = (u8)charater;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	01 0f       	add	r16, r17
     6e2:	ed e2       	ldi	r30, 0x2D	; 45
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ec 0f       	add	r30, r28
     6e8:	fd 1f       	adc	r31, r29
     6ea:	e1 0f       	add	r30, r17
     6ec:	f1 1d       	adc	r31, r1
     6ee:	80 83       	st	Z, r24
			stringNumber[c] = '\0';
     6f0:	ed e2       	ldi	r30, 0x2D	; 45
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	ec 0f       	add	r30, r28
     6f6:	fd 1f       	adc	r31, r29
     6f8:	e0 0f       	add	r30, r16
     6fa:	f1 1d       	adc	r31, r1
     6fc:	10 82       	st	Z, r1

			counter = (u8)atoi(stringNumber);
     6fe:	ce 01       	movw	r24, r28
     700:	8d 96       	adiw	r24, 0x2d	; 45
     702:	0e 94 a9 09 	call	0x1352	; 0x1352 <atoi>
     706:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <counter>
			
			LCD_voidClear();
     70a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidClear>
			LCD_voidSendNumber((f32)counter , 0);
     70e:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <counter>
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	0e 94 83 02 	call	0x506	; 0x506 <LCD_voidSendNumber>
	u8 c = 0;
	while(1){
		s8 charater = KEYPAD_u8GetKey(&keyPad);
		if (charater != (s8)-1 && charater != '=')
		{
			stringNumber[c++] = (u8)charater;
     722:	10 2f       	mov	r17, r16
	u8 stringNumber[5];
	u8 c = 0;
	while(1){
		s8 charater = KEYPAD_u8GetKey(&keyPad);
		if (charater != (s8)-1 && charater != '=')
		{
     724:	d4 cf       	rjmp	.-88     	; 0x6ce <main+0xba>

			counter = (u8)atoi(stringNumber);
			
			LCD_voidClear();
			LCD_voidSendNumber((f32)counter , 0);
		} else if (charater == '=')
     726:	8d 33       	cpi	r24, 0x3D	; 61
     728:	91 f6       	brne	.-92     	; 0x6ce <main+0xba>
		{
			showResult();
     72a:	0e 94 a1 02 	call	0x542	; 0x542 <showResult>
			c=0;
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	ce cf       	rjmp	.-100    	; 0x6ce <main+0xba>

00000732 <DIO_voidSetPinDirection>:
		case PORTC:
		PORTC_REG=Copy_u8Value;
		break;

		case PORTD:
		PORTD_REG=Copy_u8Value;
     732:	61 30       	cpi	r22, 0x01	; 1
     734:	e1 f1       	breq	.+120    	; 0x7ae <DIO_voidSetPinDirection+0x7c>
     736:	38 f0       	brcs	.+14     	; 0x746 <DIO_voidSetPinDirection+0x14>
     738:	62 30       	cpi	r22, 0x02	; 2
     73a:	09 f4       	brne	.+2      	; 0x73e <DIO_voidSetPinDirection+0xc>
     73c:	6c c0       	rjmp	.+216    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     73e:	63 30       	cpi	r22, 0x03	; 3
     740:	09 f4       	brne	.+2      	; 0x744 <DIO_voidSetPinDirection+0x12>
     742:	9d c0       	rjmp	.+314    	; 0x87e <__stack+0x1f>
     744:	08 95       	ret
     746:	41 30       	cpi	r20, 0x01	; 1
     748:	69 f4       	brne	.+26     	; 0x764 <DIO_voidSetPinDirection+0x32>
     74a:	4a b3       	in	r20, 0x1a	; 26
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	b9 01       	movw	r22, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_voidSetPinDirection+0x26>
     754:	66 0f       	add	r22, r22
     756:	77 1f       	adc	r23, r23
     758:	8a 95       	dec	r24
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_voidSetPinDirection+0x22>
     75c:	cb 01       	movw	r24, r22
     75e:	84 2b       	or	r24, r20
     760:	8a bb       	out	0x1a, r24	; 26
     762:	08 95       	ret
     764:	41 11       	cpse	r20, r1
     766:	0e c0       	rjmp	.+28     	; 0x784 <DIO_voidSetPinDirection+0x52>
     768:	4a b3       	in	r20, 0x1a	; 26
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	b9 01       	movw	r22, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_voidSetPinDirection+0x44>
     772:	66 0f       	add	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	8a 95       	dec	r24
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_voidSetPinDirection+0x40>
     77a:	cb 01       	movw	r24, r22
     77c:	80 95       	com	r24
     77e:	84 23       	and	r24, r20
     780:	8a bb       	out	0x1a, r24	; 26
     782:	08 95       	ret
     784:	42 30       	cpi	r20, 0x02	; 2
     786:	09 f0       	breq	.+2      	; 0x78a <DIO_voidSetPinDirection+0x58>
     788:	ac c0       	rjmp	.+344    	; 0x8e2 <__stack+0x83>
     78a:	4b b3       	in	r20, 0x1b	; 27
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	b9 01       	movw	r22, r18
     792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_voidSetPinDirection+0x66>
     794:	66 0f       	add	r22, r22
     796:	77 1f       	adc	r23, r23
     798:	8a 95       	dec	r24
     79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_voidSetPinDirection+0x62>
     79c:	cb 01       	movw	r24, r22
     79e:	94 2f       	mov	r25, r20
     7a0:	98 2b       	or	r25, r24
     7a2:	9b bb       	out	0x1b, r25	; 27
     7a4:	9a b3       	in	r25, 0x1a	; 26
     7a6:	80 95       	com	r24
     7a8:	89 23       	and	r24, r25
     7aa:	8a bb       	out	0x1a, r24	; 26
     7ac:	08 95       	ret
     7ae:	41 30       	cpi	r20, 0x01	; 1
     7b0:	69 f4       	brne	.+26     	; 0x7cc <DIO_voidSetPinDirection+0x9a>
     7b2:	47 b3       	in	r20, 0x17	; 23
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	b9 01       	movw	r22, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_voidSetPinDirection+0x8e>
     7bc:	66 0f       	add	r22, r22
     7be:	77 1f       	adc	r23, r23
     7c0:	8a 95       	dec	r24
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_voidSetPinDirection+0x8a>
     7c4:	cb 01       	movw	r24, r22
     7c6:	84 2b       	or	r24, r20
     7c8:	87 bb       	out	0x17, r24	; 23
     7ca:	08 95       	ret
     7cc:	41 11       	cpse	r20, r1
     7ce:	0e c0       	rjmp	.+28     	; 0x7ec <DIO_voidSetPinDirection+0xba>
     7d0:	47 b3       	in	r20, 0x17	; 23
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	b9 01       	movw	r22, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_voidSetPinDirection+0xac>
     7da:	66 0f       	add	r22, r22
     7dc:	77 1f       	adc	r23, r23
     7de:	8a 95       	dec	r24
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_voidSetPinDirection+0xa8>
     7e2:	cb 01       	movw	r24, r22
     7e4:	80 95       	com	r24
     7e6:	84 23       	and	r24, r20
     7e8:	87 bb       	out	0x17, r24	; 23
     7ea:	08 95       	ret
     7ec:	42 30       	cpi	r20, 0x02	; 2
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <DIO_voidSetPinDirection+0xc0>
     7f0:	78 c0       	rjmp	.+240    	; 0x8e2 <__stack+0x83>
     7f2:	48 b3       	in	r20, 0x18	; 24
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	b9 01       	movw	r22, r18
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	66 0f       	add	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	8a 95       	dec	r24
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_voidSetPinDirection+0xca>
     804:	cb 01       	movw	r24, r22
     806:	94 2f       	mov	r25, r20
     808:	98 2b       	or	r25, r24
     80a:	98 bb       	out	0x18, r25	; 24
     80c:	97 b3       	in	r25, 0x17	; 23
     80e:	80 95       	com	r24
     810:	89 23       	and	r24, r25
     812:	87 bb       	out	0x17, r24	; 23
     814:	08 95       	ret
     816:	41 30       	cpi	r20, 0x01	; 1
     818:	69 f4       	brne	.+26     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     81a:	44 b3       	in	r20, 0x14	; 20
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	cb 01       	movw	r24, r22
     82e:	84 2b       	or	r24, r20
     830:	84 bb       	out	0x14, r24	; 20
     832:	08 95       	ret
     834:	41 11       	cpse	r20, r1
     836:	0e c0       	rjmp	.+28     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     838:	44 b3       	in	r20, 0x14	; 20
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	b9 01       	movw	r22, r18
     840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     842:	66 0f       	add	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	8a 95       	dec	r24
     848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     84a:	cb 01       	movw	r24, r22
     84c:	80 95       	com	r24
     84e:	84 23       	and	r24, r20
     850:	84 bb       	out	0x14, r24	; 20
     852:	08 95       	ret
     854:	42 30       	cpi	r20, 0x02	; 2
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	44 c0       	rjmp	.+136    	; 0x8e2 <__stack+0x83>
     85a:	45 b3       	in	r20, 0x15	; 21
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	b9 01       	movw	r22, r18
     862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	8a 95       	dec	r24
     86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
     86c:	cb 01       	movw	r24, r22
     86e:	94 2f       	mov	r25, r20
     870:	98 2b       	or	r25, r24
     872:	95 bb       	out	0x15, r25	; 21
     874:	94 b3       	in	r25, 0x14	; 20
     876:	80 95       	com	r24
     878:	89 23       	and	r24, r25
     87a:	84 bb       	out	0x14, r24	; 20
     87c:	08 95       	ret
     87e:	41 30       	cpi	r20, 0x01	; 1
     880:	69 f4       	brne	.+26     	; 0x89c <__stack+0x3d>
     882:	41 b3       	in	r20, 0x11	; 17
     884:	21 e0       	ldi	r18, 0x01	; 1
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	b9 01       	movw	r22, r18
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
     88c:	66 0f       	add	r22, r22
     88e:	77 1f       	adc	r23, r23
     890:	8a 95       	dec	r24
     892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
     894:	cb 01       	movw	r24, r22
     896:	84 2b       	or	r24, r20
     898:	81 bb       	out	0x11, r24	; 17
     89a:	08 95       	ret
     89c:	41 11       	cpse	r20, r1
     89e:	0e c0       	rjmp	.+28     	; 0x8bc <__stack+0x5d>
     8a0:	41 b3       	in	r20, 0x11	; 17
     8a2:	21 e0       	ldi	r18, 0x01	; 1
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	b9 01       	movw	r22, r18
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	66 0f       	add	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	8a 95       	dec	r24
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	cb 01       	movw	r24, r22
     8b4:	80 95       	com	r24
     8b6:	84 23       	and	r24, r20
     8b8:	81 bb       	out	0x11, r24	; 17
     8ba:	08 95       	ret
     8bc:	42 30       	cpi	r20, 0x02	; 2
     8be:	89 f4       	brne	.+34     	; 0x8e2 <__stack+0x83>
     8c0:	42 b3       	in	r20, 0x12	; 18
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	b9 01       	movw	r22, r18
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	8a 95       	dec	r24
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	cb 01       	movw	r24, r22
     8d4:	94 2f       	mov	r25, r20
     8d6:	98 2b       	or	r25, r24
     8d8:	92 bb       	out	0x12, r25	; 18
     8da:	91 b3       	in	r25, 0x11	; 17
     8dc:	80 95       	com	r24
     8de:	89 23       	and	r24, r25
     8e0:	81 bb       	out	0x11, r24	; 17
     8e2:	08 95       	ret

000008e4 <DIO_voidSetPinValue>:
     8e4:	61 30       	cpi	r22, 0x01	; 1
     8e6:	39 f1       	breq	.+78     	; 0x936 <DIO_voidSetPinValue+0x52>
     8e8:	38 f0       	brcs	.+14     	; 0x8f8 <DIO_voidSetPinValue+0x14>
     8ea:	62 30       	cpi	r22, 0x02	; 2
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <DIO_voidSetPinValue+0xc>
     8ee:	42 c0       	rjmp	.+132    	; 0x974 <DIO_voidSetPinValue+0x90>
     8f0:	63 30       	cpi	r22, 0x03	; 3
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <DIO_voidSetPinValue+0x12>
     8f4:	5e c0       	rjmp	.+188    	; 0x9b2 <DIO_voidSetPinValue+0xce>
     8f6:	08 95       	ret
     8f8:	41 30       	cpi	r20, 0x01	; 1
     8fa:	69 f4       	brne	.+26     	; 0x916 <DIO_voidSetPinValue+0x32>
     8fc:	4b b3       	in	r20, 0x1b	; 27
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	b9 01       	movw	r22, r18
     904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_voidSetPinValue+0x26>
     906:	66 0f       	add	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	8a 95       	dec	r24
     90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_voidSetPinValue+0x22>
     90e:	cb 01       	movw	r24, r22
     910:	84 2b       	or	r24, r20
     912:	8b bb       	out	0x1b, r24	; 27
     914:	08 95       	ret
     916:	41 11       	cpse	r20, r1
     918:	6a c0       	rjmp	.+212    	; 0x9ee <DIO_voidSetPinValue+0x10a>
     91a:	4b b3       	in	r20, 0x1b	; 27
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	b9 01       	movw	r22, r18
     922:	02 c0       	rjmp	.+4      	; 0x928 <DIO_voidSetPinValue+0x44>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	8a 95       	dec	r24
     92a:	e2 f7       	brpl	.-8      	; 0x924 <DIO_voidSetPinValue+0x40>
     92c:	cb 01       	movw	r24, r22
     92e:	80 95       	com	r24
     930:	84 23       	and	r24, r20
     932:	8b bb       	out	0x1b, r24	; 27
     934:	08 95       	ret
     936:	41 30       	cpi	r20, 0x01	; 1
     938:	69 f4       	brne	.+26     	; 0x954 <DIO_voidSetPinValue+0x70>
     93a:	48 b3       	in	r20, 0x18	; 24
     93c:	21 e0       	ldi	r18, 0x01	; 1
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	b9 01       	movw	r22, r18
     942:	02 c0       	rjmp	.+4      	; 0x948 <DIO_voidSetPinValue+0x64>
     944:	66 0f       	add	r22, r22
     946:	77 1f       	adc	r23, r23
     948:	8a 95       	dec	r24
     94a:	e2 f7       	brpl	.-8      	; 0x944 <DIO_voidSetPinValue+0x60>
     94c:	cb 01       	movw	r24, r22
     94e:	84 2b       	or	r24, r20
     950:	88 bb       	out	0x18, r24	; 24
     952:	08 95       	ret
     954:	41 11       	cpse	r20, r1
     956:	4b c0       	rjmp	.+150    	; 0x9ee <DIO_voidSetPinValue+0x10a>
     958:	48 b3       	in	r20, 0x18	; 24
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	b9 01       	movw	r22, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_voidSetPinValue+0x82>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	8a 95       	dec	r24
     968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_voidSetPinValue+0x7e>
     96a:	cb 01       	movw	r24, r22
     96c:	80 95       	com	r24
     96e:	84 23       	and	r24, r20
     970:	88 bb       	out	0x18, r24	; 24
     972:	08 95       	ret
     974:	41 30       	cpi	r20, 0x01	; 1
     976:	69 f4       	brne	.+26     	; 0x992 <DIO_voidSetPinValue+0xae>
     978:	45 b3       	in	r20, 0x15	; 21
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_voidSetPinValue+0xa2>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	8a 95       	dec	r24
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_voidSetPinValue+0x9e>
     98a:	cb 01       	movw	r24, r22
     98c:	84 2b       	or	r24, r20
     98e:	85 bb       	out	0x15, r24	; 21
     990:	08 95       	ret
     992:	41 11       	cpse	r20, r1
     994:	2c c0       	rjmp	.+88     	; 0x9ee <DIO_voidSetPinValue+0x10a>
     996:	45 b3       	in	r20, 0x15	; 21
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	b9 01       	movw	r22, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_voidSetPinValue+0xc0>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	8a 95       	dec	r24
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_voidSetPinValue+0xbc>
     9a8:	cb 01       	movw	r24, r22
     9aa:	80 95       	com	r24
     9ac:	84 23       	and	r24, r20
     9ae:	85 bb       	out	0x15, r24	; 21
     9b0:	08 95       	ret
     9b2:	41 30       	cpi	r20, 0x01	; 1
     9b4:	69 f4       	brne	.+26     	; 0x9d0 <DIO_voidSetPinValue+0xec>
     9b6:	42 b3       	in	r20, 0x12	; 18
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	b9 01       	movw	r22, r18
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_voidSetPinValue+0xe0>
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	8a 95       	dec	r24
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_voidSetPinValue+0xdc>
     9c8:	cb 01       	movw	r24, r22
     9ca:	84 2b       	or	r24, r20
     9cc:	82 bb       	out	0x12, r24	; 18
     9ce:	08 95       	ret
     9d0:	41 11       	cpse	r20, r1
     9d2:	0d c0       	rjmp	.+26     	; 0x9ee <DIO_voidSetPinValue+0x10a>
     9d4:	42 b3       	in	r20, 0x12	; 18
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	b9 01       	movw	r22, r18
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_voidSetPinValue+0xfe>
     9de:	66 0f       	add	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	8a 95       	dec	r24
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_voidSetPinValue+0xfa>
     9e6:	cb 01       	movw	r24, r22
     9e8:	80 95       	com	r24
     9ea:	84 23       	and	r24, r20
     9ec:	82 bb       	out	0x12, r24	; 18
     9ee:	08 95       	ret

000009f0 <DIO_u8GetPinValue>:
	}
}

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber, DIO_PORT_t DIO_port)
{
	switch (DIO_port)
     9f0:	61 30       	cpi	r22, 0x01	; 1
     9f2:	89 f0       	breq	.+34     	; 0xa16 <DIO_u8GetPinValue+0x26>
     9f4:	28 f0       	brcs	.+10     	; 0xa00 <DIO_u8GetPinValue+0x10>
     9f6:	62 30       	cpi	r22, 0x02	; 2
     9f8:	c9 f0       	breq	.+50     	; 0xa2c <DIO_u8GetPinValue+0x3c>
     9fa:	63 30       	cpi	r22, 0x03	; 3
     9fc:	11 f1       	breq	.+68     	; 0xa42 <DIO_u8GetPinValue+0x52>
     9fe:	2c c0       	rjmp	.+88     	; 0xa58 <DIO_u8GetPinValue+0x68>
	{
		case PORTA:
		return GET_BIT(PINA_REG , Copy_u8PinNumber);
     a00:	29 b3       	in	r18, 0x19	; 25
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <DIO_u8GetPinValue+0x1c>
     a08:	55 95       	asr	r21
     a0a:	47 95       	ror	r20
     a0c:	8a 95       	dec	r24
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <DIO_u8GetPinValue+0x18>
     a10:	ca 01       	movw	r24, r20
     a12:	81 70       	andi	r24, 0x01	; 1
     a14:	08 95       	ret

		case PORTB:
		return GET_BIT(PINB_REG , Copy_u8PinNumber);
     a16:	26 b3       	in	r18, 0x16	; 22
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a9 01       	movw	r20, r18
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_u8GetPinValue+0x32>
     a1e:	55 95       	asr	r21
     a20:	47 95       	ror	r20
     a22:	8a 95       	dec	r24
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_u8GetPinValue+0x2e>
     a26:	ca 01       	movw	r24, r20
     a28:	81 70       	andi	r24, 0x01	; 1
     a2a:	08 95       	ret

		case PORTC:
		return GET_BIT(PINC_REG , Copy_u8PinNumber);
     a2c:	23 b3       	in	r18, 0x13	; 19
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a9 01       	movw	r20, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_u8GetPinValue+0x48>
     a34:	55 95       	asr	r21
     a36:	47 95       	ror	r20
     a38:	8a 95       	dec	r24
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_u8GetPinValue+0x44>
     a3c:	ca 01       	movw	r24, r20
     a3e:	81 70       	andi	r24, 0x01	; 1
     a40:	08 95       	ret

		case PORTD:
		return GET_BIT(PIND_REG , Copy_u8PinNumber);
     a42:	20 b3       	in	r18, 0x10	; 16
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	a9 01       	movw	r20, r18
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_u8GetPinValue+0x5e>
     a4a:	55 95       	asr	r21
     a4c:	47 95       	ror	r20
     a4e:	8a 95       	dec	r24
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_u8GetPinValue+0x5a>
     a52:	ca 01       	movw	r24, r20
     a54:	81 70       	andi	r24, 0x01	; 1
     a56:	08 95       	ret

	}
	return 0;  //34an el warning :D
     a58:	80 e0       	ldi	r24, 0x00	; 0
}
     a5a:	08 95       	ret

00000a5c <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
     a7e:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <EXTI_voidCallBacks>
     a82:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <EXTI_voidCallBacks+0x1>
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
     a8a:	09 95       	icall
	}
}
     a8c:	ff 91       	pop	r31
     a8e:	ef 91       	pop	r30
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	2f 93       	push	r18
     aba:	3f 93       	push	r19
     abc:	4f 93       	push	r20
     abe:	5f 93       	push	r21
     ac0:	6f 93       	push	r22
     ac2:	7f 93       	push	r23
     ac4:	8f 93       	push	r24
     ac6:	9f 93       	push	r25
     ac8:	af 93       	push	r26
     aca:	bf 93       	push	r27
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
     ad0:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <EXTI_voidCallBacks+0x2>
     ad4:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <EXTI_voidCallBacks+0x3>
     ad8:	30 97       	sbiw	r30, 0x00	; 0
     ada:	09 f0       	breq	.+2      	; 0xade <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
     adc:	09 95       	icall
	}
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
     b22:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <EXTI_voidCallBacks+0x4>
     b26:	f0 91 fc 00 	lds	r31, 0x00FC	; 0x8000fc <EXTI_voidCallBacks+0x5>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
     b2e:	09 95       	icall
	}
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
     b74:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <TIMER0_callBacks>
     b78:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <TIMER0_callBacks+0x1>
     b7c:	30 97       	sbiw	r30, 0x00	; 0
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__vector_11+0x30>
		TIMER0_callBacks[0]();
     b80:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
     b82:	88 b7       	in	r24, 0x38	; 56
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
     b88:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <storedPreload>
     b8c:	82 bf       	out	0x32, r24	; 50
}
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if (isSoftwarePWMMode)
     bd2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isSoftwarePWMMode>
     bd6:	88 23       	and	r24, r24
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__vector_10+0x66>
	{
		SoftwarePWM_counter++;
     bda:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <SoftwarePWM_counter>
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
     be4:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <SoftwarePWM_dutyCycle>
     be8:	89 17       	cp	r24, r25
     bea:	38 f0       	brcs	.+14     	; 0xbfa <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <SoftwarePWM_PORT>
     bf2:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <SoftwarePWM_PIN>
     bf6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
     bfa:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <SoftwarePWM_counter>
     bfe:	84 36       	cpi	r24, 0x64	; 100
     c00:	88 f0       	brcs	.+34     	; 0xc24 <__vector_10+0x74>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <SoftwarePWM_PORT>
     c08:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <SoftwarePWM_PIN>
     c0c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
     c10:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <SoftwarePWM_counter>
     c14:	07 c0       	rjmp	.+14     	; 0xc24 <__vector_10+0x74>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
     c16:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <TIMER0_callBacks+0x2>
     c1a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <TIMER0_callBacks+0x3>
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	09 f0       	breq	.+2      	; 0xc24 <__vector_10+0x74>
			TIMER0_callBacks[1]();
     c22:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
     c24:	88 b7       	in	r24, 0x38	; 56
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	88 bf       	out	0x38, r24	; 56
}
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	4f 93       	push	r20
     c5c:	5f 93       	push	r21
     c5e:	6f 93       	push	r22
     c60:	7f 93       	push	r23
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	af 93       	push	r26
     c68:	bf 93       	push	r27
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
     c6e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <TIMER1_callBacks+0x4>
     c72:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <TIMER1_callBacks+0x5>
     c76:	30 97       	sbiw	r30, 0x00	; 0
     c78:	09 f0       	breq	.+2      	; 0xc7c <__vector_7+0x30>
	TIMER1_callBacks[2]();
     c7a:	09 95       	icall
}
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
     cc0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <TIMER1_callBacks+0x2>
     cc4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <TIMER1_callBacks+0x3>
     cc8:	30 97       	sbiw	r30, 0x00	; 0
     cca:	09 f0       	breq	.+2      	; 0xcce <__vector_8+0x30>
	TIMER1_callBacks[1]();
     ccc:	09 95       	icall
}
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
	overflowCounter++;
     d12:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <overflowCounter>
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
     d1c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <TIMER1_callBacks>
     d20:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <TIMER1_callBacks+0x1>
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	09 f0       	breq	.+2      	; 0xd2a <__vector_9+0x3a>
		TIMER1_callBacks[0]();
     d28:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
     d2a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <TIMER1_storedPreload>
     d2e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <TIMER1_storedPreload+0x1>
     d32:	9d bd       	out	0x2d, r25	; 45
     d34:	8c bd       	out	0x2c, r24	; 44
}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <UTILITY_generateRandomNumber>:
 *
 * Created: 9/14/2021 2:22:15 PM
 *  Author: Karim Essam
 */ 
#include "../LIB/STD_TYPES.h"
u8 UTILITY_generateRandomNumber(u8 lower , u8 upper){
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	d8 2f       	mov	r29, r24
     d5e:	c6 2f       	mov	r28, r22
	return (rand() % (upper - lower + 1)) + lower;
     d60:	0e 94 99 09 	call	0x1332	; 0x1332 <rand>
     d64:	6c 2f       	mov	r22, r28
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	6d 1b       	sub	r22, r29
     d6a:	71 09       	sbc	r23, r1
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	0e 94 1f 09 	call	0x123e	; 0x123e <__divmodhi4>
}
     d74:	8d 0f       	add	r24, r29
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <UTILITY_f32ToString>:

void UTILITY_f32ToString(char* str, f32 d, u8 n)
{
     d7c:	7f 92       	push	r7
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	6c 01       	movw	r12, r24
     d98:	4a 01       	movw	r8, r20
     d9a:	5b 01       	movw	r10, r22
     d9c:	72 2e       	mov	r7, r18
	//For integer part conversion
	u16 t = 1;
     d9e:	01 e0       	ldi	r16, 0x01	; 1
     da0:	10 e0       	ldi	r17, 0x00	; 0
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
     da2:	0b c0       	rjmp	.+22     	; 0xdba <UTILITY_f32ToString+0x3e>
	t *= 10;
     da4:	c8 01       	movw	r24, r16
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	00 0f       	add	r16, r16
     dac:	11 1f       	adc	r17, r17
     dae:	00 0f       	add	r16, r16
     db0:	11 1f       	adc	r17, r17
     db2:	00 0f       	add	r16, r16
     db4:	11 1f       	adc	r17, r17
     db6:	08 0f       	add	r16, r24
     db8:	19 1f       	adc	r17, r25
{
	//For integer part conversion
	u16 t = 1;
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
     dba:	c5 01       	movw	r24, r10
     dbc:	b4 01       	movw	r22, r8
     dbe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fixsfsi>
     dc2:	60 17       	cp	r22, r16
     dc4:	71 07       	cpc	r23, r17
     dc6:	70 f7       	brcc	.-36     	; 0xda4 <UTILITY_f32ToString+0x28>
	t *= 10;
	temp = t/10;
     dc8:	98 01       	movw	r18, r16
     dca:	ad ec       	ldi	r26, 0xCD	; 205
     dcc:	bc ec       	ldi	r27, 0xCC	; 204
     dce:	0e 94 33 09 	call	0x1266	; 0x1266 <__umulhisi3>
     dd2:	7c 01       	movw	r14, r24
     dd4:	f6 94       	lsr	r15
     dd6:	e7 94       	ror	r14
     dd8:	f6 94       	lsr	r15
     dda:	e7 94       	ror	r14
     ddc:	f6 94       	lsr	r15
     dde:	e7 94       	ror	r14
	for(i = 0; temp > 0; i++)
     de0:	c0 e0       	ldi	r28, 0x00	; 0
     de2:	d0 e0       	ldi	r29, 0x00	; 0
     de4:	2f c0       	rjmp	.+94     	; 0xe44 <UTILITY_f32ToString+0xc8>
	{
		u16 digit = ((u16)d)/temp;
     de6:	c5 01       	movw	r24, r10
     de8:	b4 01       	movw	r22, r8
     dea:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fixunssfsi>
     dee:	cb 01       	movw	r24, r22
     df0:	b7 01       	movw	r22, r14
     df2:	0e 94 0b 09 	call	0x1216	; 0x1216 <__udivmodhi4>
     df6:	cb 01       	movw	r24, r22
		str[i] = digit + '0';
     df8:	f6 01       	movw	r30, r12
     dfa:	ec 0f       	add	r30, r28
     dfc:	fd 1f       	adc	r31, r29
     dfe:	20 e3       	ldi	r18, 0x30	; 48
     e00:	26 0f       	add	r18, r22
     e02:	20 83       	st	Z, r18
		d = d - (double)(digit*temp);
     e04:	e8 9e       	mul	r14, r24
     e06:	b0 01       	movw	r22, r0
     e08:	e9 9e       	mul	r14, r25
     e0a:	70 0d       	add	r23, r0
     e0c:	f8 9e       	mul	r15, r24
     e0e:	70 0d       	add	r23, r0
     e10:	11 24       	eor	r1, r1
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	c5 01       	movw	r24, r10
     e20:	b4 01       	movw	r22, r8
     e22:	0e 94 6d 07 	call	0xeda	; 0xeda <__subsf3>
     e26:	4b 01       	movw	r8, r22
     e28:	5c 01       	movw	r10, r24
		temp /= 10;
     e2a:	97 01       	movw	r18, r14
     e2c:	ad ec       	ldi	r26, 0xCD	; 205
     e2e:	bc ec       	ldi	r27, 0xCC	; 204
     e30:	0e 94 33 09 	call	0x1266	; 0x1266 <__umulhisi3>
     e34:	7c 01       	movw	r14, r24
     e36:	f6 94       	lsr	r15
     e38:	e7 94       	ror	r14
     e3a:	f6 94       	lsr	r15
     e3c:	e7 94       	ror	r14
     e3e:	f6 94       	lsr	r15
     e40:	e7 94       	ror	r14
	u16 temp = 1;
	u16 i = 0;
	while(t <= (int)d)
	t *= 10;
	temp = t/10;
	for(i = 0; temp > 0; i++)
     e42:	21 96       	adiw	r28, 0x01	; 1
     e44:	e1 14       	cp	r14, r1
     e46:	f1 04       	cpc	r15, r1
     e48:	71 f6       	brne	.-100    	; 0xde6 <UTILITY_f32ToString+0x6a>
		u16 digit = ((u16)d)/temp;
		str[i] = digit + '0';
		d = d - (double)(digit*temp);
		temp /= 10;
	}
	if(t==1)
     e4a:	01 30       	cpi	r16, 0x01	; 1
     e4c:	11 05       	cpc	r17, r1
     e4e:	31 f4       	brne	.+12     	; 0xe5c <UTILITY_f32ToString+0xe0>
		str[i++] = '0';
     e50:	f6 01       	movw	r30, r12
     e52:	ec 0f       	add	r30, r28
     e54:	fd 1f       	adc	r31, r29
     e56:	80 e3       	ldi	r24, 0x30	; 48
     e58:	80 83       	st	Z, r24
     e5a:	21 96       	adiw	r28, 0x01	; 1
	//Add decimal point
	if (n != 0)
     e5c:	77 20       	and	r7, r7
     e5e:	51 f1       	breq	.+84     	; 0xeb4 <UTILITY_f32ToString+0x138>
		str[i++] = '.';
     e60:	f6 01       	movw	r30, r12
     e62:	ec 0f       	add	r30, r28
     e64:	fd 1f       	adc	r31, r29
     e66:	8e e2       	ldi	r24, 0x2E	; 46
     e68:	80 83       	st	Z, r24
     e6a:	21 96       	adiw	r28, 0x01	; 1
     e6c:	23 c0       	rjmp	.+70     	; 0xeb4 <UTILITY_f32ToString+0x138>

	//For after decimal point conversion
	for(; n > 0; n--)
	{
		d = d*10;
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	c5 01       	movw	r24, r10
     e78:	b4 01       	movw	r22, r8
     e7a:	0e 94 9e 08 	call	0x113c	; 0x113c <__mulsf3>
     e7e:	4b 01       	movw	r8, r22
     e80:	5c 01       	movw	r10, r24
		str[i++] = (u8)d + '0';
     e82:	8e 01       	movw	r16, r28
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	cc 0d       	add	r28, r12
     e8a:	dd 1d       	adc	r29, r13
     e8c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fixunssfsi>
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	86 0f       	add	r24, r22
     e94:	88 83       	st	Y, r24
		d -= (u8)d;
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 12 08 	call	0x1024	; 0x1024 <__floatsisf>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	c5 01       	movw	r24, r10
     ea6:	b4 01       	movw	r22, r8
     ea8:	0e 94 6d 07 	call	0xeda	; 0xeda <__subsf3>
     eac:	4b 01       	movw	r8, r22
     eae:	5c 01       	movw	r10, r24
	//Add decimal point
	if (n != 0)
		str[i++] = '.';

	//For after decimal point conversion
	for(; n > 0; n--)
     eb0:	7a 94       	dec	r7
	{
		d = d*10;
		str[i++] = (u8)d + '0';
     eb2:	e8 01       	movw	r28, r16
	//Add decimal point
	if (n != 0)
		str[i++] = '.';

	//For after decimal point conversion
	for(; n > 0; n--)
     eb4:	71 10       	cpse	r7, r1
     eb6:	db cf       	rjmp	.-74     	; 0xe6e <UTILITY_f32ToString+0xf2>
		str[i++] = (u8)d + '0';
		d -= (u8)d;
	}

	//Null end
	str[i] = 0;
     eb8:	cc 0d       	add	r28, r12
     eba:	dd 1d       	adc	r29, r13
     ebc:	18 82       	st	Y, r1
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	8f 90       	pop	r8
     ed6:	7f 90       	pop	r7
     ed8:	08 95       	ret

00000eda <__subsf3>:
     eda:	50 58       	subi	r21, 0x80	; 128

00000edc <__addsf3>:
     edc:	bb 27       	eor	r27, r27
     ede:	aa 27       	eor	r26, r26
     ee0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__addsf3x>
     ee4:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_round>
     ee8:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_pscA>
     eec:	38 f0       	brcs	.+14     	; 0xefc <__addsf3+0x20>
     eee:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscB>
     ef2:	20 f0       	brcs	.+8      	; 0xefc <__addsf3+0x20>
     ef4:	39 f4       	brne	.+14     	; 0xf04 <__addsf3+0x28>
     ef6:	9f 3f       	cpi	r25, 0xFF	; 255
     ef8:	19 f4       	brne	.+6      	; 0xf00 <__addsf3+0x24>
     efa:	26 f4       	brtc	.+8      	; 0xf04 <__addsf3+0x28>
     efc:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_nan>
     f00:	0e f4       	brtc	.+2      	; 0xf04 <__addsf3+0x28>
     f02:	e0 95       	com	r30
     f04:	e7 fb       	bst	r30, 7
     f06:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>

00000f0a <__addsf3x>:
     f0a:	e9 2f       	mov	r30, r25
     f0c:	0e 94 75 08 	call	0x10ea	; 0x10ea <__fp_split3>
     f10:	58 f3       	brcs	.-42     	; 0xee8 <__addsf3+0xc>
     f12:	ba 17       	cp	r27, r26
     f14:	62 07       	cpc	r22, r18
     f16:	73 07       	cpc	r23, r19
     f18:	84 07       	cpc	r24, r20
     f1a:	95 07       	cpc	r25, r21
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__addsf3x+0x1c>
     f1e:	79 f4       	brne	.+30     	; 0xf3e <__addsf3x+0x34>
     f20:	a6 f5       	brtc	.+104    	; 0xf8a <__addsf3x+0x80>
     f22:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_zero>
     f26:	0e f4       	brtc	.+2      	; 0xf2a <__addsf3x+0x20>
     f28:	e0 95       	com	r30
     f2a:	0b 2e       	mov	r0, r27
     f2c:	ba 2f       	mov	r27, r26
     f2e:	a0 2d       	mov	r26, r0
     f30:	0b 01       	movw	r0, r22
     f32:	b9 01       	movw	r22, r18
     f34:	90 01       	movw	r18, r0
     f36:	0c 01       	movw	r0, r24
     f38:	ca 01       	movw	r24, r20
     f3a:	a0 01       	movw	r20, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	ff 27       	eor	r31, r31
     f40:	59 1b       	sub	r21, r25
     f42:	99 f0       	breq	.+38     	; 0xf6a <__addsf3x+0x60>
     f44:	59 3f       	cpi	r21, 0xF9	; 249
     f46:	50 f4       	brcc	.+20     	; 0xf5c <__addsf3x+0x52>
     f48:	50 3e       	cpi	r21, 0xE0	; 224
     f4a:	68 f1       	brcs	.+90     	; 0xfa6 <__addsf3x+0x9c>
     f4c:	1a 16       	cp	r1, r26
     f4e:	f0 40       	sbci	r31, 0x00	; 0
     f50:	a2 2f       	mov	r26, r18
     f52:	23 2f       	mov	r18, r19
     f54:	34 2f       	mov	r19, r20
     f56:	44 27       	eor	r20, r20
     f58:	58 5f       	subi	r21, 0xF8	; 248
     f5a:	f3 cf       	rjmp	.-26     	; 0xf42 <__addsf3x+0x38>
     f5c:	46 95       	lsr	r20
     f5e:	37 95       	ror	r19
     f60:	27 95       	ror	r18
     f62:	a7 95       	ror	r26
     f64:	f0 40       	sbci	r31, 0x00	; 0
     f66:	53 95       	inc	r21
     f68:	c9 f7       	brne	.-14     	; 0xf5c <__addsf3x+0x52>
     f6a:	7e f4       	brtc	.+30     	; 0xf8a <__addsf3x+0x80>
     f6c:	1f 16       	cp	r1, r31
     f6e:	ba 0b       	sbc	r27, r26
     f70:	62 0b       	sbc	r22, r18
     f72:	73 0b       	sbc	r23, r19
     f74:	84 0b       	sbc	r24, r20
     f76:	ba f0       	brmi	.+46     	; 0xfa6 <__addsf3x+0x9c>
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	a1 f0       	breq	.+40     	; 0xfa4 <__addsf3x+0x9a>
     f7c:	ff 0f       	add	r31, r31
     f7e:	bb 1f       	adc	r27, r27
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	c2 f7       	brpl	.-16     	; 0xf78 <__addsf3x+0x6e>
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <__addsf3x+0x9c>
     f8a:	ba 0f       	add	r27, r26
     f8c:	62 1f       	adc	r22, r18
     f8e:	73 1f       	adc	r23, r19
     f90:	84 1f       	adc	r24, r20
     f92:	48 f4       	brcc	.+18     	; 0xfa6 <__addsf3x+0x9c>
     f94:	87 95       	ror	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <__addsf3x+0x9a>
     fa2:	b0 cf       	rjmp	.-160    	; 0xf04 <__addsf3+0x28>
     fa4:	93 95       	inc	r25
     fa6:	88 0f       	add	r24, r24
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__addsf3x+0xa2>
     faa:	99 27       	eor	r25, r25
     fac:	ee 0f       	add	r30, r30
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	08 95       	ret

00000fb4 <__fixsfsi>:
     fb4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fixunssfsi>
     fb8:	68 94       	set
     fba:	b1 11       	cpse	r27, r1
     fbc:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>
     fc0:	08 95       	ret

00000fc2 <__fixunssfsi>:
     fc2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_splitA>
     fc6:	88 f0       	brcs	.+34     	; 0xfea <__fixunssfsi+0x28>
     fc8:	9f 57       	subi	r25, 0x7F	; 127
     fca:	98 f0       	brcs	.+38     	; 0xff2 <__fixunssfsi+0x30>
     fcc:	b9 2f       	mov	r27, r25
     fce:	99 27       	eor	r25, r25
     fd0:	b7 51       	subi	r27, 0x17	; 23
     fd2:	b0 f0       	brcs	.+44     	; 0x1000 <__fixunssfsi+0x3e>
     fd4:	e1 f0       	breq	.+56     	; 0x100e <__fixunssfsi+0x4c>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	1a f0       	brmi	.+6      	; 0xfe6 <__fixunssfsi+0x24>
     fe0:	ba 95       	dec	r27
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__fixunssfsi+0x14>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <__fixunssfsi+0x4c>
     fe6:	b1 30       	cpi	r27, 0x01	; 1
     fe8:	91 f0       	breq	.+36     	; 0x100e <__fixunssfsi+0x4c>
     fea:	0e 94 97 08 	call	0x112e	; 0x112e <__fp_zero>
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_zero>
     ff6:	67 2f       	mov	r22, r23
     ff8:	78 2f       	mov	r23, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	b8 5f       	subi	r27, 0xF8	; 248
     ffe:	39 f0       	breq	.+14     	; 0x100e <__fixunssfsi+0x4c>
    1000:	b9 3f       	cpi	r27, 0xF9	; 249
    1002:	cc f3       	brlt	.-14     	; 0xff6 <__fixunssfsi+0x34>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b3 95       	inc	r27
    100c:	d9 f7       	brne	.-10     	; 0x1004 <__fixunssfsi+0x42>
    100e:	3e f4       	brtc	.+14     	; 0x101e <__fixunssfsi+0x5c>
    1010:	90 95       	com	r25
    1012:	80 95       	com	r24
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	08 95       	ret

00001020 <__floatunsisf>:
    1020:	e8 94       	clt
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <__floatsisf+0x12>

00001024 <__floatsisf>:
    1024:	97 fb       	bst	r25, 7
    1026:	3e f4       	brtc	.+14     	; 0x1036 <__floatsisf+0x12>
    1028:	90 95       	com	r25
    102a:	80 95       	com	r24
    102c:	70 95       	com	r23
    102e:	61 95       	neg	r22
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	99 23       	and	r25, r25
    1038:	a9 f0       	breq	.+42     	; 0x1064 <__floatsisf+0x40>
    103a:	f9 2f       	mov	r31, r25
    103c:	96 e9       	ldi	r25, 0x96	; 150
    103e:	bb 27       	eor	r27, r27
    1040:	93 95       	inc	r25
    1042:	f6 95       	lsr	r31
    1044:	87 95       	ror	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f1 11       	cpse	r31, r1
    104e:	f8 cf       	rjmp	.-16     	; 0x1040 <__floatsisf+0x1c>
    1050:	fa f4       	brpl	.+62     	; 0x1090 <__floatsisf+0x6c>
    1052:	bb 0f       	add	r27, r27
    1054:	11 f4       	brne	.+4      	; 0x105a <__floatsisf+0x36>
    1056:	60 ff       	sbrs	r22, 0
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <__floatsisf+0x6c>
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <__floatsisf+0x6c>
    1064:	88 23       	and	r24, r24
    1066:	11 f0       	breq	.+4      	; 0x106c <__floatsisf+0x48>
    1068:	96 e9       	ldi	r25, 0x96	; 150
    106a:	11 c0       	rjmp	.+34     	; 0x108e <__floatsisf+0x6a>
    106c:	77 23       	and	r23, r23
    106e:	21 f0       	breq	.+8      	; 0x1078 <__floatsisf+0x54>
    1070:	9e e8       	ldi	r25, 0x8E	; 142
    1072:	87 2f       	mov	r24, r23
    1074:	76 2f       	mov	r23, r22
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <__floatsisf+0x5e>
    1078:	66 23       	and	r22, r22
    107a:	71 f0       	breq	.+28     	; 0x1098 <__floatsisf+0x74>
    107c:	96 e8       	ldi	r25, 0x86	; 134
    107e:	86 2f       	mov	r24, r22
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	2a f0       	brmi	.+10     	; 0x1090 <__floatsisf+0x6c>
    1086:	9a 95       	dec	r25
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	da f7       	brpl	.-10     	; 0x1086 <__floatsisf+0x62>
    1090:	88 0f       	add	r24, r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__fp_inf>:
    109a:	97 f9       	bld	r25, 7
    109c:	9f 67       	ori	r25, 0x7F	; 127
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	08 95       	ret

000010a6 <__fp_nan>:
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	80 ec       	ldi	r24, 0xC0	; 192
    10aa:	08 95       	ret

000010ac <__fp_pscA>:
    10ac:	00 24       	eor	r0, r0
    10ae:	0a 94       	dec	r0
    10b0:	16 16       	cp	r1, r22
    10b2:	17 06       	cpc	r1, r23
    10b4:	18 06       	cpc	r1, r24
    10b6:	09 06       	cpc	r0, r25
    10b8:	08 95       	ret

000010ba <__fp_pscB>:
    10ba:	00 24       	eor	r0, r0
    10bc:	0a 94       	dec	r0
    10be:	12 16       	cp	r1, r18
    10c0:	13 06       	cpc	r1, r19
    10c2:	14 06       	cpc	r1, r20
    10c4:	05 06       	cpc	r0, r21
    10c6:	08 95       	ret

000010c8 <__fp_round>:
    10c8:	09 2e       	mov	r0, r25
    10ca:	03 94       	inc	r0
    10cc:	00 0c       	add	r0, r0
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__fp_round+0xc>
    10d0:	88 23       	and	r24, r24
    10d2:	52 f0       	brmi	.+20     	; 0x10e8 <__fp_round+0x20>
    10d4:	bb 0f       	add	r27, r27
    10d6:	40 f4       	brcc	.+16     	; 0x10e8 <__fp_round+0x20>
    10d8:	bf 2b       	or	r27, r31
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__fp_round+0x18>
    10dc:	60 ff       	sbrs	r22, 0
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <__fp_round+0x20>
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	08 95       	ret

000010ea <__fp_split3>:
    10ea:	57 fd       	sbrc	r21, 7
    10ec:	90 58       	subi	r25, 0x80	; 128
    10ee:	44 0f       	add	r20, r20
    10f0:	55 1f       	adc	r21, r21
    10f2:	59 f0       	breq	.+22     	; 0x110a <__fp_splitA+0x10>
    10f4:	5f 3f       	cpi	r21, 0xFF	; 255
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__fp_splitA+0x1a>
    10f8:	47 95       	ror	r20

000010fa <__fp_splitA>:
    10fa:	88 0f       	add	r24, r24
    10fc:	97 fb       	bst	r25, 7
    10fe:	99 1f       	adc	r25, r25
    1100:	61 f0       	breq	.+24     	; 0x111a <__fp_splitA+0x20>
    1102:	9f 3f       	cpi	r25, 0xFF	; 255
    1104:	79 f0       	breq	.+30     	; 0x1124 <__fp_splitA+0x2a>
    1106:	87 95       	ror	r24
    1108:	08 95       	ret
    110a:	12 16       	cp	r1, r18
    110c:	13 06       	cpc	r1, r19
    110e:	14 06       	cpc	r1, r20
    1110:	55 1f       	adc	r21, r21
    1112:	f2 cf       	rjmp	.-28     	; 0x10f8 <__fp_split3+0xe>
    1114:	46 95       	lsr	r20
    1116:	f1 df       	rcall	.-30     	; 0x10fa <__fp_splitA>
    1118:	08 c0       	rjmp	.+16     	; 0x112a <__fp_splitA+0x30>
    111a:	16 16       	cp	r1, r22
    111c:	17 06       	cpc	r1, r23
    111e:	18 06       	cpc	r1, r24
    1120:	99 1f       	adc	r25, r25
    1122:	f1 cf       	rjmp	.-30     	; 0x1106 <__fp_splitA+0xc>
    1124:	86 95       	lsr	r24
    1126:	71 05       	cpc	r23, r1
    1128:	61 05       	cpc	r22, r1
    112a:	08 94       	sec
    112c:	08 95       	ret

0000112e <__fp_zero>:
    112e:	e8 94       	clt

00001130 <__fp_szero>:
    1130:	bb 27       	eor	r27, r27
    1132:	66 27       	eor	r22, r22
    1134:	77 27       	eor	r23, r23
    1136:	cb 01       	movw	r24, r22
    1138:	97 f9       	bld	r25, 7
    113a:	08 95       	ret

0000113c <__mulsf3>:
    113c:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulsf3x>
    1140:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_round>
    1144:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_pscA>
    1148:	38 f0       	brcs	.+14     	; 0x1158 <__mulsf3+0x1c>
    114a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscB>
    114e:	20 f0       	brcs	.+8      	; 0x1158 <__mulsf3+0x1c>
    1150:	95 23       	and	r25, r21
    1152:	11 f0       	breq	.+4      	; 0x1158 <__mulsf3+0x1c>
    1154:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
    1158:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_nan>
    115c:	11 24       	eor	r1, r1
    115e:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>

00001162 <__mulsf3x>:
    1162:	0e 94 75 08 	call	0x10ea	; 0x10ea <__fp_split3>
    1166:	70 f3       	brcs	.-36     	; 0x1144 <__mulsf3+0x8>

00001168 <__mulsf3_pse>:
    1168:	95 9f       	mul	r25, r21
    116a:	c1 f3       	breq	.-16     	; 0x115c <__mulsf3+0x20>
    116c:	95 0f       	add	r25, r21
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	55 1f       	adc	r21, r21
    1172:	62 9f       	mul	r22, r18
    1174:	f0 01       	movw	r30, r0
    1176:	72 9f       	mul	r23, r18
    1178:	bb 27       	eor	r27, r27
    117a:	f0 0d       	add	r31, r0
    117c:	b1 1d       	adc	r27, r1
    117e:	63 9f       	mul	r22, r19
    1180:	aa 27       	eor	r26, r26
    1182:	f0 0d       	add	r31, r0
    1184:	b1 1d       	adc	r27, r1
    1186:	aa 1f       	adc	r26, r26
    1188:	64 9f       	mul	r22, r20
    118a:	66 27       	eor	r22, r22
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	66 1f       	adc	r22, r22
    1192:	82 9f       	mul	r24, r18
    1194:	22 27       	eor	r18, r18
    1196:	b0 0d       	add	r27, r0
    1198:	a1 1d       	adc	r26, r1
    119a:	62 1f       	adc	r22, r18
    119c:	73 9f       	mul	r23, r19
    119e:	b0 0d       	add	r27, r0
    11a0:	a1 1d       	adc	r26, r1
    11a2:	62 1f       	adc	r22, r18
    11a4:	83 9f       	mul	r24, r19
    11a6:	a0 0d       	add	r26, r0
    11a8:	61 1d       	adc	r22, r1
    11aa:	22 1f       	adc	r18, r18
    11ac:	74 9f       	mul	r23, r20
    11ae:	33 27       	eor	r19, r19
    11b0:	a0 0d       	add	r26, r0
    11b2:	61 1d       	adc	r22, r1
    11b4:	23 1f       	adc	r18, r19
    11b6:	84 9f       	mul	r24, r20
    11b8:	60 0d       	add	r22, r0
    11ba:	21 1d       	adc	r18, r1
    11bc:	82 2f       	mov	r24, r18
    11be:	76 2f       	mov	r23, r22
    11c0:	6a 2f       	mov	r22, r26
    11c2:	11 24       	eor	r1, r1
    11c4:	9f 57       	subi	r25, 0x7F	; 127
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	9a f0       	brmi	.+38     	; 0x11f0 <__mulsf3_pse+0x88>
    11ca:	f1 f0       	breq	.+60     	; 0x1208 <__mulsf3_pse+0xa0>
    11cc:	88 23       	and	r24, r24
    11ce:	4a f0       	brmi	.+18     	; 0x11e2 <__mulsf3_pse+0x7a>
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	bb 1f       	adc	r27, r27
    11d6:	66 1f       	adc	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	91 50       	subi	r25, 0x01	; 1
    11de:	50 40       	sbci	r21, 0x00	; 0
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__mulsf3_pse+0x64>
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	51 05       	cpc	r21, r1
    11e6:	80 f0       	brcs	.+32     	; 0x1208 <__mulsf3_pse+0xa0>
    11e8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
    11ec:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	e4 f3       	brlt	.-8      	; 0x11ec <__mulsf3_pse+0x84>
    11f4:	98 3e       	cpi	r25, 0xE8	; 232
    11f6:	d4 f3       	brlt	.-12     	; 0x11ec <__mulsf3_pse+0x84>
    11f8:	86 95       	lsr	r24
    11fa:	77 95       	ror	r23
    11fc:	67 95       	ror	r22
    11fe:	b7 95       	ror	r27
    1200:	f7 95       	ror	r31
    1202:	e7 95       	ror	r30
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c1 f7       	brne	.-16     	; 0x11f8 <__mulsf3_pse+0x90>
    1208:	fe 2b       	or	r31, r30
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__udivmodhi4>:
    1216:	aa 1b       	sub	r26, r26
    1218:	bb 1b       	sub	r27, r27
    121a:	51 e1       	ldi	r21, 0x11	; 17
    121c:	07 c0       	rjmp	.+14     	; 0x122c <__udivmodhi4_ep>

0000121e <__udivmodhi4_loop>:
    121e:	aa 1f       	adc	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	a6 17       	cp	r26, r22
    1224:	b7 07       	cpc	r27, r23
    1226:	10 f0       	brcs	.+4      	; 0x122c <__udivmodhi4_ep>
    1228:	a6 1b       	sub	r26, r22
    122a:	b7 0b       	sbc	r27, r23

0000122c <__udivmodhi4_ep>:
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	5a 95       	dec	r21
    1232:	a9 f7       	brne	.-22     	; 0x121e <__udivmodhi4_loop>
    1234:	80 95       	com	r24
    1236:	90 95       	com	r25
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	08 95       	ret

0000123e <__divmodhi4>:
    123e:	97 fb       	bst	r25, 7
    1240:	07 2e       	mov	r0, r23
    1242:	16 f4       	brtc	.+4      	; 0x1248 <__divmodhi4+0xa>
    1244:	00 94       	com	r0
    1246:	07 d0       	rcall	.+14     	; 0x1256 <__divmodhi4_neg1>
    1248:	77 fd       	sbrc	r23, 7
    124a:	09 d0       	rcall	.+18     	; 0x125e <__divmodhi4_neg2>
    124c:	0e 94 0b 09 	call	0x1216	; 0x1216 <__udivmodhi4>
    1250:	07 fc       	sbrc	r0, 7
    1252:	05 d0       	rcall	.+10     	; 0x125e <__divmodhi4_neg2>
    1254:	3e f4       	brtc	.+14     	; 0x1264 <__divmodhi4_exit>

00001256 <__divmodhi4_neg1>:
    1256:	90 95       	com	r25
    1258:	81 95       	neg	r24
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__divmodhi4_neg2>:
    125e:	70 95       	com	r23
    1260:	61 95       	neg	r22
    1262:	7f 4f       	sbci	r23, 0xFF	; 255

00001264 <__divmodhi4_exit>:
    1264:	08 95       	ret

00001266 <__umulhisi3>:
    1266:	a2 9f       	mul	r26, r18
    1268:	b0 01       	movw	r22, r0
    126a:	b3 9f       	mul	r27, r19
    126c:	c0 01       	movw	r24, r0
    126e:	a3 9f       	mul	r26, r19
    1270:	70 0d       	add	r23, r0
    1272:	81 1d       	adc	r24, r1
    1274:	11 24       	eor	r1, r1
    1276:	91 1d       	adc	r25, r1
    1278:	b2 9f       	mul	r27, r18
    127a:	70 0d       	add	r23, r0
    127c:	81 1d       	adc	r24, r1
    127e:	11 24       	eor	r1, r1
    1280:	91 1d       	adc	r25, r1
    1282:	08 95       	ret

00001284 <__muluhisi3>:
    1284:	0e 94 33 09 	call	0x1266	; 0x1266 <__umulhisi3>
    1288:	a5 9f       	mul	r26, r21
    128a:	90 0d       	add	r25, r0
    128c:	b4 9f       	mul	r27, r20
    128e:	90 0d       	add	r25, r0
    1290:	a4 9f       	mul	r26, r20
    1292:	80 0d       	add	r24, r0
    1294:	91 1d       	adc	r25, r1
    1296:	11 24       	eor	r1, r1
    1298:	08 95       	ret

0000129a <do_rand>:
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
    12b0:	68 81       	ld	r22, Y
    12b2:	79 81       	ldd	r23, Y+1	; 0x01
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	61 15       	cp	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	81 05       	cpc	r24, r1
    12be:	91 05       	cpc	r25, r1
    12c0:	21 f4       	brne	.+8      	; 0x12ca <do_rand+0x30>
    12c2:	64 e2       	ldi	r22, 0x24	; 36
    12c4:	79 ed       	ldi	r23, 0xD9	; 217
    12c6:	8b e5       	ldi	r24, 0x5B	; 91
    12c8:	97 e0       	ldi	r25, 0x07	; 7
    12ca:	2d e1       	ldi	r18, 0x1D	; 29
    12cc:	33 ef       	ldi	r19, 0xF3	; 243
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0e 94 cf 09 	call	0x139e	; 0x139e <__divmodsi4>
    12d6:	49 01       	movw	r8, r18
    12d8:	5a 01       	movw	r10, r20
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	a7 ea       	ldi	r26, 0xA7	; 167
    12e0:	b1 e4       	ldi	r27, 0x41	; 65
    12e2:	0e 94 42 09 	call	0x1284	; 0x1284 <__muluhisi3>
    12e6:	6b 01       	movw	r12, r22
    12e8:	7c 01       	movw	r14, r24
    12ea:	ac ee       	ldi	r26, 0xEC	; 236
    12ec:	b4 ef       	ldi	r27, 0xF4	; 244
    12ee:	a5 01       	movw	r20, r10
    12f0:	94 01       	movw	r18, r8
    12f2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulohisi3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8c 0d       	add	r24, r12
    12fc:	9d 1d       	adc	r25, r13
    12fe:	ae 1d       	adc	r26, r14
    1300:	bf 1d       	adc	r27, r15
    1302:	b7 ff       	sbrs	r27, 7
    1304:	03 c0       	rjmp	.+6      	; 0x130c <do_rand+0x72>
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	a1 09       	sbc	r26, r1
    130a:	b0 48       	sbci	r27, 0x80	; 128
    130c:	88 83       	st	Y, r24
    130e:	99 83       	std	Y+1, r25	; 0x01
    1310:	aa 83       	std	Y+2, r26	; 0x02
    1312:	bb 83       	std	Y+3, r27	; 0x03
    1314:	9f 77       	andi	r25, 0x7F	; 127
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	08 95       	ret

0000132c <rand_r>:
    132c:	0e 94 4d 09 	call	0x129a	; 0x129a <do_rand>
    1330:	08 95       	ret

00001332 <rand>:
    1332:	80 e6       	ldi	r24, 0x60	; 96
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 4d 09 	call	0x129a	; 0x129a <do_rand>
    133a:	08 95       	ret

0000133c <srand>:
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1344:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1348:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    134c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1350:	08 95       	ret

00001352 <atoi>:
    1352:	fc 01       	movw	r30, r24
    1354:	88 27       	eor	r24, r24
    1356:	99 27       	eor	r25, r25
    1358:	e8 94       	clt
    135a:	21 91       	ld	r18, Z+
    135c:	20 32       	cpi	r18, 0x20	; 32
    135e:	e9 f3       	breq	.-6      	; 0x135a <atoi+0x8>
    1360:	29 30       	cpi	r18, 0x09	; 9
    1362:	10 f0       	brcs	.+4      	; 0x1368 <atoi+0x16>
    1364:	2e 30       	cpi	r18, 0x0E	; 14
    1366:	c8 f3       	brcs	.-14     	; 0x135a <atoi+0x8>
    1368:	2b 32       	cpi	r18, 0x2B	; 43
    136a:	41 f0       	breq	.+16     	; 0x137c <atoi+0x2a>
    136c:	2d 32       	cpi	r18, 0x2D	; 45
    136e:	39 f4       	brne	.+14     	; 0x137e <atoi+0x2c>
    1370:	68 94       	set
    1372:	04 c0       	rjmp	.+8      	; 0x137c <atoi+0x2a>
    1374:	0e 94 c7 09 	call	0x138e	; 0x138e <__mulhi_const_10>
    1378:	82 0f       	add	r24, r18
    137a:	91 1d       	adc	r25, r1
    137c:	21 91       	ld	r18, Z+
    137e:	20 53       	subi	r18, 0x30	; 48
    1380:	2a 30       	cpi	r18, 0x0A	; 10
    1382:	c0 f3       	brcs	.-16     	; 0x1374 <atoi+0x22>
    1384:	1e f4       	brtc	.+6      	; 0x138c <atoi+0x3a>
    1386:	90 95       	com	r25
    1388:	81 95       	neg	r24
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__mulhi_const_10>:
    138e:	7a e0       	ldi	r23, 0x0A	; 10
    1390:	97 9f       	mul	r25, r23
    1392:	90 2d       	mov	r25, r0
    1394:	87 9f       	mul	r24, r23
    1396:	80 2d       	mov	r24, r0
    1398:	91 0d       	add	r25, r1
    139a:	11 24       	eor	r1, r1
    139c:	08 95       	ret

0000139e <__divmodsi4>:
    139e:	05 2e       	mov	r0, r21
    13a0:	97 fb       	bst	r25, 7
    13a2:	1e f4       	brtc	.+6      	; 0x13aa <__divmodsi4+0xc>
    13a4:	00 94       	com	r0
    13a6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__negsi2>
    13aa:	57 fd       	sbrc	r21, 7
    13ac:	07 d0       	rcall	.+14     	; 0x13bc <__divmodsi4_neg2>
    13ae:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__udivmodsi4>
    13b2:	07 fc       	sbrc	r0, 7
    13b4:	03 d0       	rcall	.+6      	; 0x13bc <__divmodsi4_neg2>
    13b6:	4e f4       	brtc	.+18     	; 0x13ca <__divmodsi4_exit>
    13b8:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__negsi2>

000013bc <__divmodsi4_neg2>:
    13bc:	50 95       	com	r21
    13be:	40 95       	com	r20
    13c0:	30 95       	com	r19
    13c2:	21 95       	neg	r18
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	4f 4f       	sbci	r20, 0xFF	; 255
    13c8:	5f 4f       	sbci	r21, 0xFF	; 255

000013ca <__divmodsi4_exit>:
    13ca:	08 95       	ret

000013cc <__negsi2>:
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__mulshisi3>:
    13dc:	b7 ff       	sbrs	r27, 7
    13de:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__muluhisi3>

000013e2 <__mulohisi3>:
    13e2:	0e 94 42 09 	call	0x1284	; 0x1284 <__muluhisi3>
    13e6:	82 1b       	sub	r24, r18
    13e8:	93 0b       	sbc	r25, r19
    13ea:	08 95       	ret

000013ec <__udivmodsi4>:
    13ec:	a1 e2       	ldi	r26, 0x21	; 33
    13ee:	1a 2e       	mov	r1, r26
    13f0:	aa 1b       	sub	r26, r26
    13f2:	bb 1b       	sub	r27, r27
    13f4:	fd 01       	movw	r30, r26
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <__udivmodsi4_ep>

000013f8 <__udivmodsi4_loop>:
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	ee 1f       	adc	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	a2 17       	cp	r26, r18
    1402:	b3 07       	cpc	r27, r19
    1404:	e4 07       	cpc	r30, r20
    1406:	f5 07       	cpc	r31, r21
    1408:	20 f0       	brcs	.+8      	; 0x1412 <__udivmodsi4_ep>
    140a:	a2 1b       	sub	r26, r18
    140c:	b3 0b       	sbc	r27, r19
    140e:	e4 0b       	sbc	r30, r20
    1410:	f5 0b       	sbc	r31, r21

00001412 <__udivmodsi4_ep>:
    1412:	66 1f       	adc	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	88 1f       	adc	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	1a 94       	dec	r1
    141c:	69 f7       	brne	.-38     	; 0x13f8 <__udivmodsi4_loop>
    141e:	60 95       	com	r22
    1420:	70 95       	com	r23
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	bd 01       	movw	r22, r26
    142c:	cf 01       	movw	r24, r30
    142e:	08 95       	ret

00001430 <_exit>:
    1430:	f8 94       	cli

00001432 <__stop_program>:
    1432:	ff cf       	rjmp	.-2      	; 0x1432 <__stop_program>
